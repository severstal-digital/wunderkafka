name: pull-request

on:
  pull_request:
    branches:
      - master

jobs:
  independent:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pydantic-settings-version: [ '~=2.0.0', '' ]
        # ToDo (tribunsky.kir): make avro extra too but do not forget to require requests in the sake of SRs
        dataclasses-avroschema-version: [ '~=0.36.0', '~=0.40.0', '' ]
        python-version: [ '3.8', '3.9', '3.10', '3.11' ]
    container: python:${{ matrix.python-version }}-slim-bookworm
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: install system dependencies
        run: |
          apt-get update
          apt-get install -y librdkafka1
      - name: install confluent-kafka w/o SASL/SSL support
        run: |
          pip install confluent-kafka[avro]~=1.9.0
      - name: Install testing dependencies
        run: |
          if pip install pytest pydantic-settings{{ matrix.pydantic-settings-version }} dataclasses-avroschema${{ matrix.dataclasses-avroschema-version }}; then
              echo "Installed dependencies simultaneously"     
          else
              echo "Error resolving dependencies... Installing consequently"
              python -m pip install pytest 
              python -m pip install pydantic-settings${{ matrix.pydantic-settings-version }} 
              python -m pip install dataclasses-avroschema${{ matrix.dataclasses-avroschema-version }}
          fi
      - name: run pytest
        run: pytest -s tests/
      - name: Install dependencies
        run: |
          pip install mypy
      - name: run mypy
        run: mypy --config setup.cfg .
  checks:
    needs: [independent]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pydantic-settings-version: ['~=2.0.0', '']
        dataclasses-avroschema-version: ['~=0.36.0', '~=0.40.0', '']
        python-version: [ '3.8', '3.9', '3.10', '3.11' ]
    container: severstaldigital/python-librdkafka:${{ matrix.python-version }}-librdkafka-1.6.0-v0.5
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install testing dependencies
      run: | 
        if pip install pytest pydantic-settings{{ matrix.pydantic-settings-version }} dataclasses-avroschema${{ matrix.dataclasses-avroschema-version }}; then
            echo "Installed dependencies simultaneously"     
        else
            echo "Error resolving dependencies... Installing consequently"
            python -m pip install pytest 
            python -m pip install pydantic-settings${{ matrix.pydantic-settings-version }} 
            python -m pip install dataclasses-avroschema${{ matrix.dataclasses-avroschema-version }}
        fi
    - name: run pytest
      run: pytest -s tests/
    - name: Install dependencies
      run: |
        pip install mypy
    - name: run mypy
      run: mypy --config setup.cfg .

  version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Get git tag.
        id: get_tag
        # ToDo (tribunsky.kir): replace it with semver autobumper
        run: |
          get_version () {
            local VERSION=''
            local LAST_GIT_TAG=''
            LAST_GIT_TAG=$(git tag --merged origin/master | sort -V | tail -n 1)
            VERSION=$(echo "${LAST_GIT_TAG}" | grep -P '^v\d+\.\d+.\d+$' | sed 's/^v//')
            echo "$VERSION"
          }

          increment_version() {
            local version=${1}
            local section=${2}
            local delimiter=.
            local array=($(echo "$version" | tr $delimiter '\n'))
            array[$section]=$((array[$section]+1))
            echo $(local IFS=$delimiter ; echo "${array[*]}")
          }
          
          VERSION_TAG="$(get_version)"
          echo "Extracted latest tag from master branch: ${VERSION_TAG}"
          if [ -z "${VERSION_TAG}" ]; then
            echo "Couldn't detect any existing revision number. Please, place a tag."
            exit 1
          else
            BUILD_VERSION="$(increment_version ${VERSION_TAG} 2).dev${GITHUB_RUN_NUMBER}"
            echo "Got revision number for a current build: ${BUILD_VERSION}"
            echo tag="${BUILD_VERSION}" >> $GITHUB_OUTPUT       
          fi

  deploy:
    needs: [checks, version]
    runs-on: ubuntu-latest
    steps:
    - name: Install packaging dependencies
      run: pip install build
    - uses: actions/checkout@v3
    - name: sed version
      run: |
        echo "Got version from vcs: ${{ needs.version.outputs.tag }}"
        sed -i 's/version = 0.0.0/version = ${{ needs.version.outputs.tag }}/' setup.cfg
        cat setup.cfg | grep -i version
    - name: Build package
      run: python -m build
    - name: Publish package to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
